cmake_minimum_required(VERSION 3.12)

# 注意：此CMakeLists文件应该通过emcmake调用
# 但不再检查EMSCRIPTEN变量，因为emcmake会以其他方式设置工具链

project(FilledContours)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Emscripten specific settings
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s ALLOW_MEMORY_GROWTH=1 -s WASM=1")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s EXPORTED_RUNTIME_METHODS=['ccall','cwrap'] -s EXPORT_NAME=FilledContoursModule -s MODULARIZE=1 -s EXPORT_ES6=0 -s USE_ES6_IMPORT_META=0 -s ENVIRONMENT='web'")

# Allow file operations for loading JSON files
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s FILESYSTEM=1")

# Export the necessary HTML file
set(CMAKE_EXECUTABLE_SUFFIX ".html")

# Copy our custom HTML template
configure_file(${CMAKE_SOURCE_DIR}/FilledContours1.html ${CMAKE_BINARY_DIR}/FilledContours1.html COPYONLY)

# Find VTK
find_package(VTK REQUIRED)
message(STATUS "Found VTK version: ${VTK_VERSION}")

# Find jsoncpp (usually included with VTK)
find_package(jsoncpp QUIET)
if(NOT jsoncpp_FOUND)
  message(STATUS "Using VTK bundled jsoncpp")
endif()

# Include directories - using SYSTEM to avoid warnings from third-party headers
include_directories(SYSTEM ${VTK_INCLUDE_DIRS})

# Headers
set(HEADERS
    ColorUtils.h
)

# Sources
set(SOURCES 
    FilledContours1.cxx
)

# Create the executable for WebAssembly
add_executable(FilledContours1 ${SOURCES} ${HEADERS})
target_link_libraries(FilledContours1 ${VTK_LIBRARIES})

# VTK module initialization
if(VTK_VERSION VERSION_GREATER_EQUAL "8.90.0")
  vtk_module_autoinit(
    TARGETS FilledContours1
    MODULES ${VTK_LIBRARIES}
  )
endif()

# Installation
install(TARGETS FilledContours1
    RUNTIME DESTINATION bin
)

# Copy HTML to bin directory
install(FILES ${CMAKE_BINARY_DIR}/FilledContours1.html
    DESTINATION bin
)

# 检查是否使用了正确的工具链文件
if(NOT CMAKE_TOOLCHAIN_FILE MATCHES "Emscripten.cmake")
  message(STATUS "提示: 请确保使用emcmake调用此文件，当前CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
endif()

# 确保MinGW make被正确识别
if(CMAKE_MAKE_PROGRAM STREQUAL "CMAKE_MAKE_PROGRAM-NOTFOUND")
  set(CMAKE_MAKE_PROGRAM "mingw32-make" CACHE FILEPATH "Path to make executable")
endif()

# Set Emscripten specific flags
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")

# Common Emscripten compiler and linker flags
set(EMSCRIPTEN_COMPILE_FLAGS
  "-s USE_WEBGL2=1"
  "-s FULL_ES3=1"
  "-s WASM=1"
  "-s ALLOW_MEMORY_GROWTH=1"
  "-s EXPORTED_RUNTIME_METHODS=['ccall','cwrap']"
  "-s EXPORT_ES6=1"
  "-s MODULARIZE=1"
  "-s EXPORT_NAME=FilledContours"
  "-s USE_PTHREADS=0"
  "-O3"
)

# Link flags for the executable
set(EMSCRIPTEN_LINK_FLAGS
  ${EMSCRIPTEN_COMPILE_FLAGS}
  "-s INITIAL_MEMORY=256MB"
  "--bind"
  "--preload-file ${CMAKE_CURRENT_SOURCE_DIR}/testData.json@/testData.json"
  "--preload-file ${CMAKE_CURRENT_SOURCE_DIR}/colorScale.json@/colorScale.json"
  "--shell-file ${CMAKE_CURRENT_SOURCE_DIR}/shell.html"
)

# Precompiler definitions
add_definitions(-DVTK_OPENGL_HAS_OSMESA -DVTK_OPENGL_HAS_EGL)

# Set include directories
target_include_directories(FilledContours1 PRIVATE ${VTK_INCLUDE_DIRS})

# Copy additional files for web deployment
message(STATUS "Copying web files to output directory: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/web/index.html
               ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/index.html COPYONLY)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/web/style.css
               ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/style.css COPYONLY)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/web/filledcontours-api.js
               ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/filledcontours-api.js COPYONLY)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/web/example.html
               ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/example.html COPYONLY)

# Check if we're actually using the Emscripten toolchain
if(NOT EMSCRIPTEN)
  message(FATAL_ERROR "This configuration file is meant to be used with Emscripten. Please use emcmake to configure the build.")
endif() 